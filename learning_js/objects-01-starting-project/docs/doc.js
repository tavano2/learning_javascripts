/*
    객체란 무엇인가?
        - 객체는 javaScript의 핵심 데이터 구조이다.
        - 이유는 실제 개체를 나타낼 때에 사용될 수 있기 때문
        - ex) button, movie와 같이 실생활에 의미 있는 개체를 나타낼 수 있다.
        - 현실에 있는 개체를 쉽게 설명하고 말이 되는 코드를 작성하는것을 기본 개념으로 이해하자.
        - 객체는 키-값 쌍인 프로퍼티와 메서드로 이뤄져 있다.
        - 즉 변수는 객체의 프로퍼티, 함수는 객체의 메서드라고도 설명할 수 있다.
        - 데이터를 그룹화하고 코드를 논리에 따라 쉽게 나눌 수 있도록 도와준다.
     
    javascript에서의 객체
        - 자바스크립트에서 값은 크게 두개로 나눌 수 있는데
        - 원시 값과 참조 값으로 나눌 수 있다.
        - 참조 값이 바로 객체이며 오직 객체만이 참조 값이라고 할 수 있다.
    
    체이닝 개념
        - 코드를 작성하다보면 한 표현식에 여러 점이 들어가는 것을 확인할 수 있다.
        ex) movie.info.title;
        - 위와 같이 분리하여 title을 값을 가져오는 것이 아니라 depth의 제일 끝부분까지
        - 값을 찾아오는 연산을 연결하는 뜻으로 이해하자. 체이닝은 메소드에서도 사용 할 수 있다.
        ex) Math.random().toString();
    전개 연산자
        - 배열에서도 공부한 연산자를 객체에서 사용해보자
        - 객체를 깊은 복사할 시에도 효율적으로 사용할 수 있다.
        ex) person2 = { ...person1 };
        - 위와 같은 모드로 person2는 person1을 깊은 복사하여 다른 주소 체계를 가진다.
        - 주의! 이전 섹터에서 배웠다 싶이 참조변수는 깊은 복사되지 않는다.
        ex) const person3 = {...person1, age:29, hobbies:[...person1.hobbies]};
        - 참조 변수까지 깊은 복사하려면 위 예제처럼 진행하면 된다.
    Object.assing()
        - 객체를 복사할 수 있는 다른 방법을 알아보자.
        ex) const person2 = Object.assign({}, person);
        - 위와 같은 방법으로도 복사 가능하다.
        - 참조 변수는 전개 연산자와 같이 따로 깊은 복사를 해주어야 한다.
    객체 구조 분해
        - objects.js 참고
*/