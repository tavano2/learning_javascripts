/*
- 조건적 코드에서 전역 상수 식별자로 활용하기
    가끔 함수 파라미터를 조건식으로 사용할 때가 있고
    그것을 어떤 값에 비교하는 경우가 있을 것이다.
    어떤 값을 매번 하드코딩으로 작성한다면 버그가 발생할 확률이 높아 상수로 지정하는 것이 좋다.
    ex) app.js 내부 mode === "ATTACK" -> mode === ATTACK_VAL


- 삼항 연산자 & 연산식
    IF문에서는 값이 반환되지 않고 조건식에 따라 코드가 덤프되어 실행되는 방식이다.
    하지만 사용자 이름이나 다른 상수 또는 변수를 다른 값으로 사용하는 코드가 있는 경우에는
    상수에 저장하려는 실제 값이 일부 조건 마다 다른 경우가 있다.

    이럴 경우 편리하게 연산식으로 반환할 수 있는 방법이 삼항 연산자 & 연산식이다.
    ex) const userName = isLogin ? "Max" : null
    isLogin이 참일 때 "MAX"라는 값을, 거짓일 때 null이라는 값을 반환한다.

    삼항 연산자 역시 중첩으로 사용할 수 있지만 조심스럽게 사용해야한다.

- 문장 VS 표현식
    표현식 -> 상수나 변수에 저장하는 값이나 함수에서 반환되는 값 등을 말함
    문장 -> 모든 표현식을 문장이라고 일컸지만
    보통 조건문이나 반복문 같은 기술을 사용할 때 문장이라고 말한다.
    특정된 문법으로만 사용할 수 있는 것도 문장이라고 할 수 있다.

    즉 두개의 차이점을 살펴보려면 오른쪽에 등호가 사용 가능한지 판별하면 된다.
    EX) IF문 (문장) VS 삼항연산자(표현식)

- 논리연산자 "팁"
    1. truthy 또는 falsy 값을 실제 불리언으로 전환하거나 강제로 전환하는 방법 - !! 연산자
        ex) !!"" => false, !!1 => true
       따라서 이것은 빈 문자열을 거짓으로 전환하거나 숫자를 참으로 전환할 떄 유용하게 쓴다.
    2. 변수를 할당할 때 or 값을 지정하면 true로 반환되는 값을 변수로 지정하여 반환한다.
        ex) const name = "" || "MAX" 의 결과는 MAX다.
        둘 다 참일시에는 첫번째 값을 반환한다.
        둘 다 거짓일시에는 두번째 값을 반환한다.
    3. 변수를 할당할 때 and 값을 지정하면 참일시 마지막 값을 반환한다.
       하나라도 false값이 있을시에는 항상 첫 번째 값을 반환한다.

    이런 팁이나 축약어 같은 경우에는 사용하지 못해도 괜찮다.
    앱의 성능이나 속도에 지장을 주지 않으며 단지 코드를 줄일 수 있는 대안일 뿐이며
    코드를 리펙토링해서 다시 사용 가능하다.

    이 방식 때문에 자바스크립트에서는 || 으로 변수/상수에 기본/대체 값을 할당하는데 자주 쓰인다.

- switch문 <- app.js 참고
    if문과 비슷한 문장이지만 다수의 동치 확인이 필요한 경우에 아주 유용하다.
    동치 확인이 아닌 경우에도 사용할 수 있지만 코드가 굉장히 더러워지므로
    그런 상황에서는 원래의 if문을 사용하자.

    추가적으로 switch가 이를 비교하기 위해 내부적으로 삼항 비교 연산자를 사용하는 것을 기억해두자.

- 반복문
    자바스크립트의 또 다른 중요한 기능인 반복문에 대해 살펴보자
    어떤 코드를 여러번 실행하는 상황을 자주 겪게 된다.
    좋아, 이래서 함수가 존재하지. 해당 함수를 여러번 실행하면 되지 않아?
    라고 생각할 수도 있지만, 해당 호출을 1000번 이상 한다고 가정했을 때
    함수 호출을 1000번 작성해야 하는 번거로움이 존재한다.

    반복문은 이처럼 반복되는 코드를 보다 동적이고 유연한 방법으로 작성할 수 있게 도와준다.
    자바 스크립트에는 4개의 메인 반복 문장이 있다.

    각 반복문의 개념은 무엇이고 어떻게 사용할까?

        1. for loop - while과 같이 가장 오래된 반복문으로 특정 횟수만큼 코드를 실행하게 해주고 카운트 변수를 사용하게 된다.
        ex) for (let i = 0 ; i < 3; i+++) { console.log(i); }
        2. for of loop - 보통 배열의 모든 요소에 대해 실행된다.
        ex) for (const el of array) { console.log(el); }
        3. for in loop - 객체의 모든 키에 대해 코드를 실행해주는 반복문
        ex) for (const key in obj) { console.log(key); console.log(obj[key]); } 
        4. while loop - 어떤 조건이 충족 되는 동안에 무한적으로 실행된다.
        ex) while(isLoggedIn) { ... }
    
    몇몇 반복문 참고사항
        1. for-of 문에서는 인덱스를 뽑아올 수 있는 방법이 없다.
        2. 출구 조건이 반복문 코드 내부에 도출되어 실행이 언제 종료될지 미리 알 수 없는 경우에는
            while문을 활용하자.

    break, continue 키워드
        break - 전체 반복 문장의 진행을 중단하고 싶을 때 사용한다.
        continue -  하나의 반복 문장의 진행을 중단하고 싶을 떄 사용한다.

    레이블 문장으로 제어해보기
        어플리케이션의 특정 로긱 내부 반복문 안에 조건이 있는데
        조건이 충족되면 외부 반복문을 종료시키는 구조일 때 사용된다.
        ex)
            let j = 0;
            outerWhile : do {
                console.log("Outer :: ", j);
                innerFor: for (let k = 0; k < 5; k ++) {
                if( k === 3) {
                    break outerWhile;
                }
                console.log("Inner :: ", k);
                }
                j++;
            } while (j < 3);
        위와 같이 문장 앞에 명칭을 지정하고 break시에 명칭을 호출하면 된다.
- 오류 처리
    자바스크립트가 개발자로서 불가피한 오류들을 제어해보자 
    예를들어 숫자를 입력하도록 의도한 필드에 문자가 들어가거나
    네트워크 통신 단절으로 네트워크 오류가 발생하는 경우 등등
    이렇게 예방할 수 없거나 배제할 수 없는 문제들이 생긴다.

    이럴 때 최선의 방법은 개발자만의 커스텀 오류를 발생시키고
    품위있게 그 오류를 받아내는 것이다.

    그리고 이런 작업을 try-catch로 할 수 있다.
    이는 자바스크립트 제공하는 또 다른 제어 구조로서
    실패할 수도 있는 어떤 코드를 시도(try)하고
    코드안에서 일어나는 잠재적 오류를 받아(catch) 처리해보자.
*/