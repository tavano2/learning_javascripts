/* 
- 크롬 개발자 도구 performance 탭
    페이지를 랜더링할때 브라우저에서 실행하는 작업을 자세하게 알 수 있고
    이를 통해 많은 작업을 진행할 수 있다.
    스크립트가 어떻게 로드, 분석 실행되었는지 방법을 이해하고 문제도 확인 가능하다.

- defer, async 속성
    많은 수의 스크립트를 로드할 때 성능이 저하될 우려가 있으므로
    웹 서버에 호스팅할시에 이런 지연을 줄여야한다.
    head 영역에 스크립트를 옮기면 속도가 향상되지만, html 컴포넌트가 로딩되기 전에
    스크립트를 불러온다면 에러가 발생한다.

    이때의 솔루션은 스크립트에 추가할 수 있는 추가 속성인 defer 속성이다.
    html 코드가 구문 분석되고 렌더링 되는 것을 차단하지 않고 계속 구문 분석을 진행하면서
    스크립트 다운로드를 미리 진행 후 html 렌더링이 완료되면 스크립트를 실행한다.

    만일 html 코드에 의존하지 않는 자바스크립트라면 defer 속성을 제외하고 async 속성을 추가하자.
    async의 경우 js 임포트 순서와 관계 없이 먼저 로드된 스크립트가 실행된다는 것을 추가로 기억하자.
    반대로 defer는 순서를 보장한다.

    마지막으로 해당 두 속성은 외부 연결 스크립트만 가능하고
    인라인(html 내부에서 script 호출)은 불가능하다.
*/