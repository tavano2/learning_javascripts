// 함수에 대해 좀 더 알아보기

/*
- 함수 생성에 다양한 방식
    먼저 함수 정의에 대해 다시 복습해보자.
    1. 함수는 온디맨드 형식(프로그램의 흐름 중에서 필요한 시점에만 실행되도록 하는 형식)으로 코드를 정의하는 구조이다.
    2. 함수 내에서 상수나 변수를 생성하면 해당 함수 소속된다. (블록 스코프)
    3. 함수는 인수라는 매개변수를 취해 값을 반환하는데, 함수 내에서 어느 것도 하지 않고 매개변수를 반환 가능하며,
       매개변수를 취하지 않고 아무것도 반환하지 않는 함수도 작성할 수 있다.
    4. 함수는 훌륭한 동적 온디맨드 코드이다. (인수를 매번 다르게 받지만 같은 코드를 중복적으로 활용 가능)
    5. 함수는 직접,간버으로 호출할 수 있다. (직접호출 : ()를 사용하여 호출 간접호출 : 이벤트 리스너를 통해 바인딩하거나, 컴포넌트에 바인딩하여 사용)

- 메서드
    메서드란 무엇일까? 메서드는 객체에 함수가 저장된 것을 말한다.
    여기서 헷갈릴 수 있지만 메서드 역시 객체임을 이해하자.
    함수 역시 객체임을 배웠으므로 함수 = 객체 = 메서드임을 알아두자.

- 변수에 함수 저장하기
    ES5까지는 전역 스코프 개념 때문에 변수에 함수를 저장하더라도 이벤트 리스너에 함수명을 넣으면 동작했지만
    ES6부터는 저장한 변수명을 호출해야 동작한다.
    저장하는 변수에 함수명을 생략할 수 있는데, 이런 함수가 익명 함수라고 불린다.

- 함수 표현식 vs 선언
    선언문 ex)
    fuction multiply(a, b) {
        return a * b;
    }
    표현식 ex)
    const multiply = function(a, b) {
        return a * b;
    };

    선언 형식을 자바스크립트 엔진이 hoist를 통해 파일의 맨 위로 초기화를 진행한다.
    하지만 표현식은 표현식 자체를 작성할 때 초기화가 되므로, 초기화 되기 이전의 코드라인에서 호출이 불가능하다.
    
- 익명 함수
    익명 함수란 말 그대로 함수명이 없는 함수를 말한다.
    이벤트 리스너나 객체안에서 주로 사용하는데, 해당 리스너나 객체를 딱 한번만 사용할 때
    추후 코드를 확인한 개발자가 참조로 넣은 함수를 따로 찾을 필요가 없는 편리함을 제공해줄 수 있다.

    하지만 코드라인이 길거나 복잡한 경우 익명함수를 권장하지 않는데,
    익명함수에서 에러가 발생할 경우 어떤 함수에서 문제가 발생했는지 나오지 않는다.

- 화살표 함수
    app.js에 getWinner 변수를 보면 화살표 함수로 정의했다.
    해당 함수의 특징은 무엇일까?
    화살표 함수의 장점은 다양한 방식으로 설계할 수 있다는 것이다.
    또한 function 키워드를 생략할 수 있어 더 짧은 코드를 작성 가능하다.
    그리고 간단하게 반환문으로 바로 사용할 수 있는 코드라면 중괄호와 return을 생략할 수 있다.

    ex)
        const add = (a, b) => a + b;
        const add2 = function(a, b) {
            return a + b;
        }

- 콜백 함수 & 중첩 함수
- 기본 인수와 rest 연산자
- 빌트인 함수
*/